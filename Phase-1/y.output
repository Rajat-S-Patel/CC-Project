Nonterminals useless in grammar

    Function
    FunctionParams
    COND_STMT
    bin_arop


Terminals unused in grammar

    STRC
    BREAK
    CONTINUE
    IF
    ELSE


Rules useless in grammar

   95 Function: %empty
   96         | MAIN

   97 FunctionParams: FunctionParams COMMA TYPE ID CBR
   98               | TYPE ID CBR

   99 COND_STMT: IF OB COND CB LOOPBODY
  100          | IF OB COND CB LOOPBODY ELSE LOOPBODY
  101          | IF OB COND CB LOOPBODY ELSE IF OB COND CB LOOPBODY
  102          | IF OB COND CB LOOPBODY ELSE IF OB COND CB LOOPBODY ELSE LOOPBODY
  103          | IF OB COND CB LOOPBODY ELSE IF OB COND CB LOOPBODY ELSE IF OB COND CB LOOPBODY
  104          | IF OB COND CB LOOPBODY ELSE IF OB COND CB LOOPBODY ELSE IF OB COND CB LOOPBODY ELSE LOOPBODY

  105 bin_arop: T_pl
  106         | T_min
  107         | T_mul
  108         | T_div


Rules useless in parser due to conflicts

   14 CLASS_DEC: %empty

   63 ARITH_NEW: LIT


State 47 conflicts: 2 shift/reduce, 5 reduce/reduce
State 51 conflicts: 4 shift/reduce
State 58 conflicts: 8 reduce/reduce
State 90 conflicts: 4 shift/reduce
State 92 conflicts: 4 shift/reduce
State 93 conflicts: 2 shift/reduce, 5 reduce/reduce
State 125 conflicts: 4 shift/reduce
State 126 conflicts: 2 shift/reduce, 5 reduce/reduce


Grammar

    0 $accept: S $end

    1 S: START
    2  | error

    3 START: INCLUDE T_lt H T_gt CLASS_DEC FunctionDeclaration
    4      | INCLUDE T_lt H T_gt FunctionDeclaration
    5      | INCLUDE '"' H '"' MAIN
    6      | MAIN

    7 FunctionDeclaration: FunctionName OB CB TERMINATOR FunctionDeclaration
    8                    | FunctionName OB ParamsType CB TERMINATOR FunctionDeclaration
    9                    | MAIN

   10 FunctionName: TYPE ID

   11 ParamsType: ParamsType COMMA TYPE
   12           | TYPE

   13 CLASS_DEC: CLASS ID LOOPBODY TERMINATOR
   14          | %empty

   15 MAIN: VOID MAINTOK BODY
   16     | INT MAINTOK BODY

   17 BODY: OBR C CBR

   18 C: C statement TERMINATOR
   19  | C LOOPS
   20  | statement TERMINATOR
   21  | LOOPS
   22  | C OBR C CBR
   23  | OBR CBR
   24  | error TERMINATOR

   25 LOOPS: WHILE OB COND CB LOOPBODY
   26      | FOR OB ASSIGN_EXPR TERMINATOR COND TERMINATOR statement CB LOOPBODY
   27      | COND
   28      | CLASS ID LOOPBODY TERMINATOR

   29 LOOPBODY: OBR C CBR
   30         | TERMINATOR
   31         | statement TERMINATOR
   32         | OBR CBR

   33 statement: ASSIGN_EXPR
   34          | ARITH_EXPR
   35          | TERNARY_EXPR
   36          | INPUT
   37          | PRINT
   38          | RETURN ASSIGN_EXPR
   39          | RETURN ARITH_EXPR

   40 COND: LIT RELOP LIT
   41     | LIT
   42     | LIT RELOP LIT bin_boolop LIT RELOP LIT
   43     | un_boolop OB LIT RELOP LIT CB
   44     | un_boolop LIT RELOP LIT
   45     | LIT bin_boolop LIT
   46     | un_boolop OB LIT CB
   47     | un_boolop LIT

   48 ASSIGN_EXPR: ID T_eq ARITH_EXPR
   49            | TYPE ID T_eq ARITH_EXPR
   50            | TYPE ID
   51            | TYPE ID COMMA X
   52            | TYPE ID T_eq ARITH_EXPR COMMA X

   53 X: ID COMMA X
   54  | ID
   55  | ID T_eq ARITH_EXPR COMMA X
   56  | ID T_eq ARITH_EXPR

   57 ARITH_EXPR: LIT
   58           | ARITH_NEW
   59           | LIT bin_boolop ARITH_EXPR
   60           | LIT un_arop
   61           | un_arop ARITH_EXPR
   62           | un_boolop ARITH_EXPR

   63 ARITH_NEW: LIT
   64          | ARITH_EXPR T_pl ARITH_EXPR
   65          | ARITH_EXPR T_min ARITH_EXPR
   66          | ARITH_EXPR T_mul ARITH_EXPR
   67          | ARITH_EXPR T_div ARITH_EXPR

   68 TERNARY_EXPR: OB COND CB '?' statement ':' statement

   69 INPUT: CIN str_extr ID
   70      | CIN str_extr ID str_extr ID
   71      | CIN str_extr ID str_extr ID str_extr ID

   72 PRINT: COUT str_ins STRING
   73      | COUT str_ins STRING str_ins ENDL
   74      | COUT str_ins ENDL
   75      | COUT str_ins ID
   76      | COUT str_ins STRING str_ins ID

   77 LIT: ID
   78    | NUM
   79    | FLT
   80    | CHARACTER

   81 TYPE: INT
   82     | CHAR
   83     | FLOAT

   84 RELOP: T_lt
   85      | T_gt
   86      | T_lteq
   87      | T_gteq
   88      | T_neq
   89      | T_eqeq

   90 bin_boolop: T_and
   91           | T_or

   92 un_arop: T_incr
   93        | T_decr

   94 un_boolop: T_not


Terminals, with rules where they appear

    $end (0) 0
    '"' (34) 5
    ':' (58) 68
    '?' (63) 68
    error (256) 2 24
    ID (258) 10 13 28 48 49 50 51 52 53 54 55 56 69 70 71 75 76 77
    CLASS (259) 13 28
    NUM (260) 78
    T_lt (261) 3 4 84
    T_gt (262) 3 4 85
    COMMA (263) 11 51 52 53 55
    STRC (264)
    TERMINATOR (265) 7 8 13 18 20 24 26 28 30 31
    RETURN (266) 38 39
    FLT (267) 79
    T_lteq (268) 86
    T_gteq (269) 87
    T_neq (270) 88
    T_eqeq (271) 89
    T_pl (272) 64
    T_min (273) 65
    T_mul (274) 66
    T_div (275) 67
    T_and (276) 90
    T_or (277) 91
    T_incr (278) 92
    T_decr (279) 93
    T_not (280) 94
    T_eq (281) 48 49 52 55 56
    WHILE (282) 25
    INT (283) 16 81
    CHAR (284) 82
    FLOAT (285) 83
    VOID (286) 15
    H (287) 3 4 5
    MAINTOK (288) 15 16
    INCLUDE (289) 3 4 5
    BREAK (290)
    CONTINUE (291)
    IF (292)
    ELSE (293)
    COUT (294) 72 73 74 75 76
    STRING (295) 72 73 76
    FOR (296) 26
    OB (297) 7 8 25 26 43 46 68
    CB (298) 7 8 25 26 43 46 68
    OBR (299) 17 22 23 29 32
    CBR (300) 17 22 23 29 32
    ENDL (301) 73 74
    CHARACTER (302) 80
    str_ins (303) 72 73 74 75 76
    str_extr (304) 69 70 71
    CIN (305) 69 70 71


Nonterminals, with rules where they appear

    $accept (54)
        on left: 0
    S (55)
        on left: 1 2
        on right: 0
    START (56)
        on left: 3 4 5 6
        on right: 1
    FunctionDeclaration (57)
        on left: 7 8 9
        on right: 3 4 7 8
    FunctionName (58)
        on left: 10
        on right: 7 8
    ParamsType (59)
        on left: 11 12
        on right: 8 11
    CLASS_DEC (60)
        on left: 13 14
        on right: 3
    MAIN (61)
        on left: 15 16
        on right: 5 6 9
    BODY (62)
        on left: 17
        on right: 15 16
    C (63)
        on left: 18 19 20 21 22 23 24
        on right: 17 18 19 22 29
    LOOPS (64)
        on left: 25 26 27 28
        on right: 19 21
    LOOPBODY (65)
        on left: 29 30 31 32
        on right: 13 25 26 28
    statement (66)
        on left: 33 34 35 36 37 38 39
        on right: 18 20 26 31 68
    COND (67)
        on left: 40 41 42 43 44 45 46 47
        on right: 25 26 27 68
    ASSIGN_EXPR (68)
        on left: 48 49 50 51 52
        on right: 26 33 38
    X (69)
        on left: 53 54 55 56
        on right: 51 52 53 55
    ARITH_EXPR (70)
        on left: 57 58 59 60 61 62
        on right: 34 39 48 49 52 55 56 59 61 62 64 65 66 67
    ARITH_NEW (71)
        on left: 63 64 65 66 67
        on right: 58
    TERNARY_EXPR (72)
        on left: 68
        on right: 35
    INPUT (73)
        on left: 69 70 71
        on right: 36
    PRINT (74)
        on left: 72 73 74 75 76
        on right: 37
    LIT (75)
        on left: 77 78 79 80
        on right: 40 41 42 43 44 45 46 47 57 59 60 63
    TYPE (76)
        on left: 81 82 83
        on right: 10 11 12 49 50 51 52
    RELOP (77)
        on left: 84 85 86 87 88 89
        on right: 40 42 43 44
    bin_boolop (78)
        on left: 90 91
        on right: 42 45 59
    un_arop (79)
        on left: 92 93
        on right: 60 61
    un_boolop (80)
        on left: 94
        on right: 43 44 46 47 62


State 0

    0 $accept: . S $end
    1 S: . START
    2  | . error
    3 START: . INCLUDE T_lt H T_gt CLASS_DEC FunctionDeclaration
    4      | . INCLUDE T_lt H T_gt FunctionDeclaration
    5      | . INCLUDE '"' H '"' MAIN
    6      | . MAIN
   15 MAIN: . VOID MAINTOK BODY
   16     | . INT MAINTOK BODY

    error    shift, and go to state 1
    INT      shift, and go to state 2
    VOID     shift, and go to state 3
    INCLUDE  shift, and go to state 4

    S      go to state 5
    START  go to state 6
    MAIN   go to state 7


State 1

    2 S: error .

    $default  reduce using rule 2 (S)


State 2

   16 MAIN: INT . MAINTOK BODY

    MAINTOK  shift, and go to state 8


State 3

   15 MAIN: VOID . MAINTOK BODY

    MAINTOK  shift, and go to state 9


State 4

    3 START: INCLUDE . T_lt H T_gt CLASS_DEC FunctionDeclaration
    4      | INCLUDE . T_lt H T_gt FunctionDeclaration
    5      | INCLUDE . '"' H '"' MAIN

    T_lt  shift, and go to state 10
    '"'   shift, and go to state 11


State 5

    0 $accept: S . $end

    $end  shift, and go to state 12


State 6

    1 S: START .

    $default  reduce using rule 1 (S)


State 7

    6 START: MAIN .

    $default  reduce using rule 6 (START)


State 8

   16 MAIN: INT MAINTOK . BODY
   17 BODY: . OBR C CBR

    OBR  shift, and go to state 13

    BODY  go to state 14


State 9

   15 MAIN: VOID MAINTOK . BODY
   17 BODY: . OBR C CBR

    OBR  shift, and go to state 13

    BODY  go to state 15


State 10

    3 START: INCLUDE T_lt . H T_gt CLASS_DEC FunctionDeclaration
    4      | INCLUDE T_lt . H T_gt FunctionDeclaration

    H  shift, and go to state 16


State 11

    5 START: INCLUDE '"' . H '"' MAIN

    H  shift, and go to state 17


State 12

    0 $accept: S $end .

    $default  accept


State 13

   17 BODY: OBR . C CBR
   18 C: . C statement TERMINATOR
   19  | . C LOOPS
   20  | . statement TERMINATOR
   21  | . LOOPS
   22  | . C OBR C CBR
   23  | . OBR CBR
   24  | . error TERMINATOR
   25 LOOPS: . WHILE OB COND CB LOOPBODY
   26      | . FOR OB ASSIGN_EXPR TERMINATOR COND TERMINATOR statement CB LOOPBODY
   27      | . COND
   28      | . CLASS ID LOOPBODY TERMINATOR
   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   40 COND: . LIT RELOP LIT
   41     | . LIT
   42     | . LIT RELOP LIT bin_boolop LIT RELOP LIT
   43     | . un_boolop OB LIT RELOP LIT CB
   44     | . un_boolop LIT RELOP LIT
   45     | . LIT bin_boolop LIT
   46     | . un_boolop OB LIT CB
   47     | . un_boolop LIT
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    error      shift, and go to state 18
    ID         shift, and go to state 19
    CLASS      shift, and go to state 20
    NUM        shift, and go to state 21
    RETURN     shift, and go to state 22
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    WHILE      shift, and go to state 27
    INT        shift, and go to state 28
    CHAR       shift, and go to state 29
    FLOAT      shift, and go to state 30
    COUT       shift, and go to state 31
    FOR        shift, and go to state 32
    OB         shift, and go to state 33
    OBR        shift, and go to state 34
    CHARACTER  shift, and go to state 35
    CIN        shift, and go to state 36

    C             go to state 37
    LOOPS         go to state 38
    statement     go to state 39
    COND          go to state 40
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 47
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 50


State 14

   16 MAIN: INT MAINTOK BODY .

    $default  reduce using rule 16 (MAIN)


State 15

   15 MAIN: VOID MAINTOK BODY .

    $default  reduce using rule 15 (MAIN)


State 16

    3 START: INCLUDE T_lt H . T_gt CLASS_DEC FunctionDeclaration
    4      | INCLUDE T_lt H . T_gt FunctionDeclaration

    T_gt  shift, and go to state 51


State 17

    5 START: INCLUDE '"' H . '"' MAIN

    '"'  shift, and go to state 52


State 18

   24 C: error . TERMINATOR

    TERMINATOR  shift, and go to state 53


State 19

   48 ASSIGN_EXPR: ID . T_eq ARITH_EXPR
   77 LIT: ID .  [ID, CLASS, NUM, T_lt, T_gt, TERMINATOR, RETURN, FLT, T_lteq, T_gteq, T_neq, T_eqeq, T_pl, T_min, T_mul, T_div, T_and, T_or, T_incr, T_decr, T_not, WHILE, INT, CHAR, FLOAT, COUT, FOR, OB, CB, OBR, CBR, CHARACTER, CIN, ':']

    T_eq  shift, and go to state 54

    $default  reduce using rule 77 (LIT)


State 20

   28 LOOPS: CLASS . ID LOOPBODY TERMINATOR

    ID  shift, and go to state 55


State 21

   78 LIT: NUM .

    $default  reduce using rule 78 (LIT)


State 22

   38 statement: RETURN . ASSIGN_EXPR
   39          | RETURN . ARITH_EXPR
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 19
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    INT        shift, and go to state 28
    CHAR       shift, and go to state 29
    FLOAT      shift, and go to state 30
    CHARACTER  shift, and go to state 35

    ASSIGN_EXPR  go to state 56
    ARITH_EXPR   go to state 57
    ARITH_NEW    go to state 43
    LIT          go to state 58
    TYPE         go to state 48
    un_arop      go to state 49
    un_boolop    go to state 59


State 23

   79 LIT: FLT .

    $default  reduce using rule 79 (LIT)


State 24

   92 un_arop: T_incr .

    $default  reduce using rule 92 (un_arop)


State 25

   93 un_arop: T_decr .

    $default  reduce using rule 93 (un_arop)


State 26

   94 un_boolop: T_not .

    $default  reduce using rule 94 (un_boolop)


State 27

   25 LOOPS: WHILE . OB COND CB LOOPBODY

    OB  shift, and go to state 60


State 28

   81 TYPE: INT .

    $default  reduce using rule 81 (TYPE)


State 29

   82 TYPE: CHAR .

    $default  reduce using rule 82 (TYPE)


State 30

   83 TYPE: FLOAT .

    $default  reduce using rule 83 (TYPE)


State 31

   72 PRINT: COUT . str_ins STRING
   73      | COUT . str_ins STRING str_ins ENDL
   74      | COUT . str_ins ENDL
   75      | COUT . str_ins ID
   76      | COUT . str_ins STRING str_ins ID

    str_ins  shift, and go to state 61


State 32

   26 LOOPS: FOR . OB ASSIGN_EXPR TERMINATOR COND TERMINATOR statement CB LOOPBODY

    OB  shift, and go to state 62


State 33

   40 COND: . LIT RELOP LIT
   41     | . LIT
   42     | . LIT RELOP LIT bin_boolop LIT RELOP LIT
   43     | . un_boolop OB LIT RELOP LIT CB
   44     | . un_boolop LIT RELOP LIT
   45     | . LIT bin_boolop LIT
   46     | . un_boolop OB LIT CB
   47     | . un_boolop LIT
   68 TERNARY_EXPR: OB . COND CB '?' statement ':' statement
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    COND       go to state 64
    LIT        go to state 65
    un_boolop  go to state 66


State 34

   23 C: OBR . CBR

    CBR  shift, and go to state 67


State 35

   80 LIT: CHARACTER .

    $default  reduce using rule 80 (LIT)


State 36

   69 INPUT: CIN . str_extr ID
   70      | CIN . str_extr ID str_extr ID
   71      | CIN . str_extr ID str_extr ID str_extr ID

    str_extr  shift, and go to state 68


State 37

   17 BODY: OBR C . CBR
   18 C: C . statement TERMINATOR
   19  | C . LOOPS
   22  | C . OBR C CBR
   25 LOOPS: . WHILE OB COND CB LOOPBODY
   26      | . FOR OB ASSIGN_EXPR TERMINATOR COND TERMINATOR statement CB LOOPBODY
   27      | . COND
   28      | . CLASS ID LOOPBODY TERMINATOR
   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   40 COND: . LIT RELOP LIT
   41     | . LIT
   42     | . LIT RELOP LIT bin_boolop LIT RELOP LIT
   43     | . un_boolop OB LIT RELOP LIT CB
   44     | . un_boolop LIT RELOP LIT
   45     | . LIT bin_boolop LIT
   46     | . un_boolop OB LIT CB
   47     | . un_boolop LIT
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 19
    CLASS      shift, and go to state 20
    NUM        shift, and go to state 21
    RETURN     shift, and go to state 22
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    WHILE      shift, and go to state 27
    INT        shift, and go to state 28
    CHAR       shift, and go to state 29
    FLOAT      shift, and go to state 30
    COUT       shift, and go to state 31
    FOR        shift, and go to state 32
    OB         shift, and go to state 33
    OBR        shift, and go to state 69
    CBR        shift, and go to state 70
    CHARACTER  shift, and go to state 35
    CIN        shift, and go to state 36

    LOOPS         go to state 71
    statement     go to state 72
    COND          go to state 40
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 47
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 50


State 38

   21 C: LOOPS .

    $default  reduce using rule 21 (C)


State 39

   20 C: statement . TERMINATOR

    TERMINATOR  shift, and go to state 73


State 40

   27 LOOPS: COND .

    $default  reduce using rule 27 (LOOPS)


State 41

   33 statement: ASSIGN_EXPR .

    $default  reduce using rule 33 (statement)


State 42

   34 statement: ARITH_EXPR .  [TERMINATOR, CB, ':']
   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   65          | ARITH_EXPR . T_min ARITH_EXPR
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   67          | ARITH_EXPR . T_div ARITH_EXPR

    T_pl   shift, and go to state 74
    T_min  shift, and go to state 75
    T_mul  shift, and go to state 76
    T_div  shift, and go to state 77

    $default  reduce using rule 34 (statement)


State 43

   58 ARITH_EXPR: ARITH_NEW .

    $default  reduce using rule 58 (ARITH_EXPR)


State 44

   35 statement: TERNARY_EXPR .

    $default  reduce using rule 35 (statement)


State 45

   36 statement: INPUT .

    $default  reduce using rule 36 (statement)


State 46

   37 statement: PRINT .

    $default  reduce using rule 37 (statement)


State 47

   40 COND: LIT . RELOP LIT
   41     | LIT .  [ID, CLASS, NUM, RETURN, FLT, T_incr, T_decr, T_not, WHILE, INT, CHAR, FLOAT, COUT, FOR, OB, OBR, CBR, CHARACTER, CIN]
   42     | LIT . RELOP LIT bin_boolop LIT RELOP LIT
   45     | LIT . bin_boolop LIT
   57 ARITH_EXPR: LIT .  [TERMINATOR, T_pl, T_min, T_mul, T_div]
   59           | LIT . bin_boolop ARITH_EXPR
   60           | LIT . un_arop
   63 ARITH_NEW: LIT .  [TERMINATOR, T_pl, T_min, T_mul, T_div]
   84 RELOP: . T_lt
   85      | . T_gt
   86      | . T_lteq
   87      | . T_gteq
   88      | . T_neq
   89      | . T_eqeq
   90 bin_boolop: . T_and
   91           | . T_or
   92 un_arop: . T_incr
   93        | . T_decr

    T_lt    shift, and go to state 78
    T_gt    shift, and go to state 79
    T_lteq  shift, and go to state 80
    T_gteq  shift, and go to state 81
    T_neq   shift, and go to state 82
    T_eqeq  shift, and go to state 83
    T_and   shift, and go to state 84
    T_or    shift, and go to state 85
    T_incr  shift, and go to state 24
    T_decr  shift, and go to state 25

    TERMINATOR  reduce using rule 57 (ARITH_EXPR)
    TERMINATOR  [reduce using rule 63 (ARITH_NEW)]
    T_pl        reduce using rule 57 (ARITH_EXPR)
    T_pl        [reduce using rule 63 (ARITH_NEW)]
    T_min       reduce using rule 57 (ARITH_EXPR)
    T_min       [reduce using rule 63 (ARITH_NEW)]
    T_mul       reduce using rule 57 (ARITH_EXPR)
    T_mul       [reduce using rule 63 (ARITH_NEW)]
    T_div       reduce using rule 57 (ARITH_EXPR)
    T_div       [reduce using rule 63 (ARITH_NEW)]
    T_incr      [reduce using rule 41 (COND)]
    T_decr      [reduce using rule 41 (COND)]
    $default    reduce using rule 41 (COND)

    RELOP       go to state 86
    bin_boolop  go to state 87
    un_arop     go to state 88


State 48

   49 ASSIGN_EXPR: TYPE . ID T_eq ARITH_EXPR
   50            | TYPE . ID
   51            | TYPE . ID COMMA X
   52            | TYPE . ID T_eq ARITH_EXPR COMMA X

    ID  shift, and go to state 89


State 49

   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   61           | un_arop . ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 90
    ARITH_NEW   go to state 43
    LIT         go to state 58
    un_arop     go to state 49
    un_boolop   go to state 59


State 50

   43 COND: un_boolop . OB LIT RELOP LIT CB
   44     | un_boolop . LIT RELOP LIT
   46     | un_boolop . OB LIT CB
   47     | un_boolop . LIT
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   62           | un_boolop . ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    OB         shift, and go to state 91
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 92
    ARITH_NEW   go to state 43
    LIT         go to state 93
    un_arop     go to state 49
    un_boolop   go to state 59


State 51

    3 START: INCLUDE T_lt H T_gt . CLASS_DEC FunctionDeclaration
    4      | INCLUDE T_lt H T_gt . FunctionDeclaration
    7 FunctionDeclaration: . FunctionName OB CB TERMINATOR FunctionDeclaration
    8                    | . FunctionName OB ParamsType CB TERMINATOR FunctionDeclaration
    9                    | . MAIN
   10 FunctionName: . TYPE ID
   13 CLASS_DEC: . CLASS ID LOOPBODY TERMINATOR
   14          | . %empty  [INT, CHAR, FLOAT, VOID]
   15 MAIN: . VOID MAINTOK BODY
   16     | . INT MAINTOK BODY
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT

    CLASS  shift, and go to state 94
    INT    shift, and go to state 95
    CHAR   shift, and go to state 29
    FLOAT  shift, and go to state 30
    VOID   shift, and go to state 3

    INT    [reduce using rule 14 (CLASS_DEC)]
    CHAR   [reduce using rule 14 (CLASS_DEC)]
    FLOAT  [reduce using rule 14 (CLASS_DEC)]
    VOID   [reduce using rule 14 (CLASS_DEC)]

    FunctionDeclaration  go to state 96
    FunctionName         go to state 97
    CLASS_DEC            go to state 98
    MAIN                 go to state 99
    TYPE                 go to state 100


State 52

    5 START: INCLUDE '"' H '"' . MAIN
   15 MAIN: . VOID MAINTOK BODY
   16     | . INT MAINTOK BODY

    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    MAIN  go to state 101


State 53

   24 C: error TERMINATOR .

    $default  reduce using rule 24 (C)


State 54

   48 ASSIGN_EXPR: ID T_eq . ARITH_EXPR
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 102
    ARITH_NEW   go to state 43
    LIT         go to state 58
    un_arop     go to state 49
    un_boolop   go to state 59


State 55

   28 LOOPS: CLASS ID . LOOPBODY TERMINATOR
   29 LOOPBODY: . OBR C CBR
   30         | . TERMINATOR
   31         | . statement TERMINATOR
   32         | . OBR CBR
   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID          shift, and go to state 19
    NUM         shift, and go to state 21
    TERMINATOR  shift, and go to state 103
    RETURN      shift, and go to state 22
    FLT         shift, and go to state 23
    T_incr      shift, and go to state 24
    T_decr      shift, and go to state 25
    T_not       shift, and go to state 26
    INT         shift, and go to state 28
    CHAR        shift, and go to state 29
    FLOAT       shift, and go to state 30
    COUT        shift, and go to state 31
    OB          shift, and go to state 33
    OBR         shift, and go to state 104
    CHARACTER   shift, and go to state 35
    CIN         shift, and go to state 36

    LOOPBODY      go to state 105
    statement     go to state 106
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 58
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 59


State 56

   38 statement: RETURN ASSIGN_EXPR .

    $default  reduce using rule 38 (statement)


State 57

   39 statement: RETURN ARITH_EXPR .  [TERMINATOR, CB, ':']
   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   65          | ARITH_EXPR . T_min ARITH_EXPR
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   67          | ARITH_EXPR . T_div ARITH_EXPR

    T_pl   shift, and go to state 74
    T_min  shift, and go to state 75
    T_mul  shift, and go to state 76
    T_div  shift, and go to state 77

    $default  reduce using rule 39 (statement)


State 58

   57 ARITH_EXPR: LIT .  [COMMA, TERMINATOR, T_pl, T_min, T_mul, T_div, CB, ':']
   59           | LIT . bin_boolop ARITH_EXPR
   60           | LIT . un_arop
   63 ARITH_NEW: LIT .  [COMMA, TERMINATOR, T_pl, T_min, T_mul, T_div, CB, ':']
   90 bin_boolop: . T_and
   91           | . T_or
   92 un_arop: . T_incr
   93        | . T_decr

    T_and   shift, and go to state 84
    T_or    shift, and go to state 85
    T_incr  shift, and go to state 24
    T_decr  shift, and go to state 25

    COMMA       reduce using rule 57 (ARITH_EXPR)
    COMMA       [reduce using rule 63 (ARITH_NEW)]
    TERMINATOR  reduce using rule 57 (ARITH_EXPR)
    TERMINATOR  [reduce using rule 63 (ARITH_NEW)]
    T_pl        reduce using rule 57 (ARITH_EXPR)
    T_pl        [reduce using rule 63 (ARITH_NEW)]
    T_min       reduce using rule 57 (ARITH_EXPR)
    T_min       [reduce using rule 63 (ARITH_NEW)]
    T_mul       reduce using rule 57 (ARITH_EXPR)
    T_mul       [reduce using rule 63 (ARITH_NEW)]
    T_div       reduce using rule 57 (ARITH_EXPR)
    T_div       [reduce using rule 63 (ARITH_NEW)]
    CB          reduce using rule 57 (ARITH_EXPR)
    CB          [reduce using rule 63 (ARITH_NEW)]
    ':'         reduce using rule 57 (ARITH_EXPR)
    ':'         [reduce using rule 63 (ARITH_NEW)]
    $default    reduce using rule 57 (ARITH_EXPR)

    bin_boolop  go to state 107
    un_arop     go to state 88


State 59

   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   62           | un_boolop . ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 92
    ARITH_NEW   go to state 43
    LIT         go to state 58
    un_arop     go to state 49
    un_boolop   go to state 59


State 60

   25 LOOPS: WHILE OB . COND CB LOOPBODY
   40 COND: . LIT RELOP LIT
   41     | . LIT
   42     | . LIT RELOP LIT bin_boolop LIT RELOP LIT
   43     | . un_boolop OB LIT RELOP LIT CB
   44     | . un_boolop LIT RELOP LIT
   45     | . LIT bin_boolop LIT
   46     | . un_boolop OB LIT CB
   47     | . un_boolop LIT
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    COND       go to state 108
    LIT        go to state 65
    un_boolop  go to state 66


State 61

   72 PRINT: COUT str_ins . STRING
   73      | COUT str_ins . STRING str_ins ENDL
   74      | COUT str_ins . ENDL
   75      | COUT str_ins . ID
   76      | COUT str_ins . STRING str_ins ID

    ID      shift, and go to state 109
    STRING  shift, and go to state 110
    ENDL    shift, and go to state 111


State 62

   26 LOOPS: FOR OB . ASSIGN_EXPR TERMINATOR COND TERMINATOR statement CB LOOPBODY
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT

    ID     shift, and go to state 112
    INT    shift, and go to state 28
    CHAR   shift, and go to state 29
    FLOAT  shift, and go to state 30

    ASSIGN_EXPR  go to state 113
    TYPE         go to state 48


State 63

   77 LIT: ID .

    $default  reduce using rule 77 (LIT)


State 64

   68 TERNARY_EXPR: OB COND . CB '?' statement ':' statement

    CB  shift, and go to state 114


State 65

   40 COND: LIT . RELOP LIT
   41     | LIT .  [TERMINATOR, CB]
   42     | LIT . RELOP LIT bin_boolop LIT RELOP LIT
   45     | LIT . bin_boolop LIT
   84 RELOP: . T_lt
   85      | . T_gt
   86      | . T_lteq
   87      | . T_gteq
   88      | . T_neq
   89      | . T_eqeq
   90 bin_boolop: . T_and
   91           | . T_or

    T_lt    shift, and go to state 78
    T_gt    shift, and go to state 79
    T_lteq  shift, and go to state 80
    T_gteq  shift, and go to state 81
    T_neq   shift, and go to state 82
    T_eqeq  shift, and go to state 83
    T_and   shift, and go to state 84
    T_or    shift, and go to state 85

    $default  reduce using rule 41 (COND)

    RELOP       go to state 86
    bin_boolop  go to state 115


State 66

   43 COND: un_boolop . OB LIT RELOP LIT CB
   44     | un_boolop . LIT RELOP LIT
   46     | un_boolop . OB LIT CB
   47     | un_boolop . LIT
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    OB         shift, and go to state 91
    CHARACTER  shift, and go to state 35

    LIT  go to state 116


State 67

   23 C: OBR CBR .

    $default  reduce using rule 23 (C)


State 68

   69 INPUT: CIN str_extr . ID
   70      | CIN str_extr . ID str_extr ID
   71      | CIN str_extr . ID str_extr ID str_extr ID

    ID  shift, and go to state 117


State 69

   18 C: . C statement TERMINATOR
   19  | . C LOOPS
   20  | . statement TERMINATOR
   21  | . LOOPS
   22  | . C OBR C CBR
   22  | C OBR . C CBR
   23  | . OBR CBR
   24  | . error TERMINATOR
   25 LOOPS: . WHILE OB COND CB LOOPBODY
   26      | . FOR OB ASSIGN_EXPR TERMINATOR COND TERMINATOR statement CB LOOPBODY
   27      | . COND
   28      | . CLASS ID LOOPBODY TERMINATOR
   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   40 COND: . LIT RELOP LIT
   41     | . LIT
   42     | . LIT RELOP LIT bin_boolop LIT RELOP LIT
   43     | . un_boolop OB LIT RELOP LIT CB
   44     | . un_boolop LIT RELOP LIT
   45     | . LIT bin_boolop LIT
   46     | . un_boolop OB LIT CB
   47     | . un_boolop LIT
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    error      shift, and go to state 18
    ID         shift, and go to state 19
    CLASS      shift, and go to state 20
    NUM        shift, and go to state 21
    RETURN     shift, and go to state 22
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    WHILE      shift, and go to state 27
    INT        shift, and go to state 28
    CHAR       shift, and go to state 29
    FLOAT      shift, and go to state 30
    COUT       shift, and go to state 31
    FOR        shift, and go to state 32
    OB         shift, and go to state 33
    OBR        shift, and go to state 34
    CHARACTER  shift, and go to state 35
    CIN        shift, and go to state 36

    C             go to state 118
    LOOPS         go to state 38
    statement     go to state 39
    COND          go to state 40
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 47
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 50


State 70

   17 BODY: OBR C CBR .

    $default  reduce using rule 17 (BODY)


State 71

   19 C: C LOOPS .

    $default  reduce using rule 19 (C)


State 72

   18 C: C statement . TERMINATOR

    TERMINATOR  shift, and go to state 119


State 73

   20 C: statement TERMINATOR .

    $default  reduce using rule 20 (C)


State 74

   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   64          | ARITH_EXPR T_pl . ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 120
    ARITH_NEW   go to state 43
    LIT         go to state 58
    un_arop     go to state 49
    un_boolop   go to state 59


State 75

   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   65          | ARITH_EXPR T_min . ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 121
    ARITH_NEW   go to state 43
    LIT         go to state 58
    un_arop     go to state 49
    un_boolop   go to state 59


State 76

   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   66          | ARITH_EXPR T_mul . ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 122
    ARITH_NEW   go to state 43
    LIT         go to state 58
    un_arop     go to state 49
    un_boolop   go to state 59


State 77

   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   67          | ARITH_EXPR T_div . ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 123
    ARITH_NEW   go to state 43
    LIT         go to state 58
    un_arop     go to state 49
    un_boolop   go to state 59


State 78

   84 RELOP: T_lt .

    $default  reduce using rule 84 (RELOP)


State 79

   85 RELOP: T_gt .

    $default  reduce using rule 85 (RELOP)


State 80

   86 RELOP: T_lteq .

    $default  reduce using rule 86 (RELOP)


State 81

   87 RELOP: T_gteq .

    $default  reduce using rule 87 (RELOP)


State 82

   88 RELOP: T_neq .

    $default  reduce using rule 88 (RELOP)


State 83

   89 RELOP: T_eqeq .

    $default  reduce using rule 89 (RELOP)


State 84

   90 bin_boolop: T_and .

    $default  reduce using rule 90 (bin_boolop)


State 85

   91 bin_boolop: T_or .

    $default  reduce using rule 91 (bin_boolop)


State 86

   40 COND: LIT RELOP . LIT
   42     | LIT RELOP . LIT bin_boolop LIT RELOP LIT
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    CHARACTER  shift, and go to state 35

    LIT  go to state 124


State 87

   45 COND: LIT bin_boolop . LIT
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   59           | LIT bin_boolop . ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 125
    ARITH_NEW   go to state 43
    LIT         go to state 126
    un_arop     go to state 49
    un_boolop   go to state 59


State 88

   60 ARITH_EXPR: LIT un_arop .

    $default  reduce using rule 60 (ARITH_EXPR)


State 89

   49 ASSIGN_EXPR: TYPE ID . T_eq ARITH_EXPR
   50            | TYPE ID .  [TERMINATOR, CB, ':']
   51            | TYPE ID . COMMA X
   52            | TYPE ID . T_eq ARITH_EXPR COMMA X

    COMMA  shift, and go to state 127
    T_eq   shift, and go to state 128

    $default  reduce using rule 50 (ASSIGN_EXPR)


State 90

   61 ARITH_EXPR: un_arop ARITH_EXPR .  [COMMA, TERMINATOR, T_pl, T_min, T_mul, T_div, CB, ':']
   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   65          | ARITH_EXPR . T_min ARITH_EXPR
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   67          | ARITH_EXPR . T_div ARITH_EXPR

    T_pl   shift, and go to state 74
    T_min  shift, and go to state 75
    T_mul  shift, and go to state 76
    T_div  shift, and go to state 77

    T_pl      [reduce using rule 61 (ARITH_EXPR)]
    T_min     [reduce using rule 61 (ARITH_EXPR)]
    T_mul     [reduce using rule 61 (ARITH_EXPR)]
    T_div     [reduce using rule 61 (ARITH_EXPR)]
    $default  reduce using rule 61 (ARITH_EXPR)


State 91

   43 COND: un_boolop OB . LIT RELOP LIT CB
   46     | un_boolop OB . LIT CB
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    CHARACTER  shift, and go to state 35

    LIT  go to state 129


State 92

   62 ARITH_EXPR: un_boolop ARITH_EXPR .  [COMMA, TERMINATOR, T_pl, T_min, T_mul, T_div, CB, ':']
   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   65          | ARITH_EXPR . T_min ARITH_EXPR
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   67          | ARITH_EXPR . T_div ARITH_EXPR

    T_pl   shift, and go to state 74
    T_min  shift, and go to state 75
    T_mul  shift, and go to state 76
    T_div  shift, and go to state 77

    T_pl      [reduce using rule 62 (ARITH_EXPR)]
    T_min     [reduce using rule 62 (ARITH_EXPR)]
    T_mul     [reduce using rule 62 (ARITH_EXPR)]
    T_div     [reduce using rule 62 (ARITH_EXPR)]
    $default  reduce using rule 62 (ARITH_EXPR)


State 93

   44 COND: un_boolop LIT . RELOP LIT
   47     | un_boolop LIT .  [ID, CLASS, NUM, RETURN, FLT, T_incr, T_decr, T_not, WHILE, INT, CHAR, FLOAT, COUT, FOR, OB, OBR, CBR, CHARACTER, CIN]
   57 ARITH_EXPR: LIT .  [TERMINATOR, T_pl, T_min, T_mul, T_div]
   59           | LIT . bin_boolop ARITH_EXPR
   60           | LIT . un_arop
   63 ARITH_NEW: LIT .  [TERMINATOR, T_pl, T_min, T_mul, T_div]
   84 RELOP: . T_lt
   85      | . T_gt
   86      | . T_lteq
   87      | . T_gteq
   88      | . T_neq
   89      | . T_eqeq
   90 bin_boolop: . T_and
   91           | . T_or
   92 un_arop: . T_incr
   93        | . T_decr

    T_lt    shift, and go to state 78
    T_gt    shift, and go to state 79
    T_lteq  shift, and go to state 80
    T_gteq  shift, and go to state 81
    T_neq   shift, and go to state 82
    T_eqeq  shift, and go to state 83
    T_and   shift, and go to state 84
    T_or    shift, and go to state 85
    T_incr  shift, and go to state 24
    T_decr  shift, and go to state 25

    TERMINATOR  reduce using rule 57 (ARITH_EXPR)
    TERMINATOR  [reduce using rule 63 (ARITH_NEW)]
    T_pl        reduce using rule 57 (ARITH_EXPR)
    T_pl        [reduce using rule 63 (ARITH_NEW)]
    T_min       reduce using rule 57 (ARITH_EXPR)
    T_min       [reduce using rule 63 (ARITH_NEW)]
    T_mul       reduce using rule 57 (ARITH_EXPR)
    T_mul       [reduce using rule 63 (ARITH_NEW)]
    T_div       reduce using rule 57 (ARITH_EXPR)
    T_div       [reduce using rule 63 (ARITH_NEW)]
    T_incr      [reduce using rule 47 (COND)]
    T_decr      [reduce using rule 47 (COND)]
    $default    reduce using rule 47 (COND)

    RELOP       go to state 130
    bin_boolop  go to state 107
    un_arop     go to state 88


State 94

   13 CLASS_DEC: CLASS . ID LOOPBODY TERMINATOR

    ID  shift, and go to state 131


State 95

   16 MAIN: INT . MAINTOK BODY
   81 TYPE: INT .  [ID]

    MAINTOK  shift, and go to state 8

    $default  reduce using rule 81 (TYPE)


State 96

    4 START: INCLUDE T_lt H T_gt FunctionDeclaration .

    $default  reduce using rule 4 (START)


State 97

    7 FunctionDeclaration: FunctionName . OB CB TERMINATOR FunctionDeclaration
    8                    | FunctionName . OB ParamsType CB TERMINATOR FunctionDeclaration

    OB  shift, and go to state 132


State 98

    3 START: INCLUDE T_lt H T_gt CLASS_DEC . FunctionDeclaration
    7 FunctionDeclaration: . FunctionName OB CB TERMINATOR FunctionDeclaration
    8                    | . FunctionName OB ParamsType CB TERMINATOR FunctionDeclaration
    9                    | . MAIN
   10 FunctionName: . TYPE ID
   15 MAIN: . VOID MAINTOK BODY
   16     | . INT MAINTOK BODY
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT

    INT    shift, and go to state 95
    CHAR   shift, and go to state 29
    FLOAT  shift, and go to state 30
    VOID   shift, and go to state 3

    FunctionDeclaration  go to state 133
    FunctionName         go to state 97
    MAIN                 go to state 99
    TYPE                 go to state 100


State 99

    9 FunctionDeclaration: MAIN .

    $default  reduce using rule 9 (FunctionDeclaration)


State 100

   10 FunctionName: TYPE . ID

    ID  shift, and go to state 134


State 101

    5 START: INCLUDE '"' H '"' MAIN .

    $default  reduce using rule 5 (START)


State 102

   48 ASSIGN_EXPR: ID T_eq ARITH_EXPR .  [TERMINATOR, CB, ':']
   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   65          | ARITH_EXPR . T_min ARITH_EXPR
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   67          | ARITH_EXPR . T_div ARITH_EXPR

    T_pl   shift, and go to state 74
    T_min  shift, and go to state 75
    T_mul  shift, and go to state 76
    T_div  shift, and go to state 77

    $default  reduce using rule 48 (ASSIGN_EXPR)


State 103

   30 LOOPBODY: TERMINATOR .

    $default  reduce using rule 30 (LOOPBODY)


State 104

   18 C: . C statement TERMINATOR
   19  | . C LOOPS
   20  | . statement TERMINATOR
   21  | . LOOPS
   22  | . C OBR C CBR
   23  | . OBR CBR
   24  | . error TERMINATOR
   25 LOOPS: . WHILE OB COND CB LOOPBODY
   26      | . FOR OB ASSIGN_EXPR TERMINATOR COND TERMINATOR statement CB LOOPBODY
   27      | . COND
   28      | . CLASS ID LOOPBODY TERMINATOR
   29 LOOPBODY: OBR . C CBR
   32         | OBR . CBR
   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   40 COND: . LIT RELOP LIT
   41     | . LIT
   42     | . LIT RELOP LIT bin_boolop LIT RELOP LIT
   43     | . un_boolop OB LIT RELOP LIT CB
   44     | . un_boolop LIT RELOP LIT
   45     | . LIT bin_boolop LIT
   46     | . un_boolop OB LIT CB
   47     | . un_boolop LIT
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    error      shift, and go to state 18
    ID         shift, and go to state 19
    CLASS      shift, and go to state 20
    NUM        shift, and go to state 21
    RETURN     shift, and go to state 22
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    WHILE      shift, and go to state 27
    INT        shift, and go to state 28
    CHAR       shift, and go to state 29
    FLOAT      shift, and go to state 30
    COUT       shift, and go to state 31
    FOR        shift, and go to state 32
    OB         shift, and go to state 33
    OBR        shift, and go to state 34
    CBR        shift, and go to state 135
    CHARACTER  shift, and go to state 35
    CIN        shift, and go to state 36

    C             go to state 136
    LOOPS         go to state 38
    statement     go to state 39
    COND          go to state 40
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 47
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 50


State 105

   28 LOOPS: CLASS ID LOOPBODY . TERMINATOR

    TERMINATOR  shift, and go to state 137


State 106

   31 LOOPBODY: statement . TERMINATOR

    TERMINATOR  shift, and go to state 138


State 107

   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   59           | LIT bin_boolop . ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 125
    ARITH_NEW   go to state 43
    LIT         go to state 58
    un_arop     go to state 49
    un_boolop   go to state 59


State 108

   25 LOOPS: WHILE OB COND . CB LOOPBODY

    CB  shift, and go to state 139


State 109

   75 PRINT: COUT str_ins ID .

    $default  reduce using rule 75 (PRINT)


State 110

   72 PRINT: COUT str_ins STRING .  [TERMINATOR, CB, ':']
   73      | COUT str_ins STRING . str_ins ENDL
   76      | COUT str_ins STRING . str_ins ID

    str_ins  shift, and go to state 140

    $default  reduce using rule 72 (PRINT)


State 111

   74 PRINT: COUT str_ins ENDL .

    $default  reduce using rule 74 (PRINT)


State 112

   48 ASSIGN_EXPR: ID . T_eq ARITH_EXPR

    T_eq  shift, and go to state 54


State 113

   26 LOOPS: FOR OB ASSIGN_EXPR . TERMINATOR COND TERMINATOR statement CB LOOPBODY

    TERMINATOR  shift, and go to state 141


State 114

   68 TERNARY_EXPR: OB COND CB . '?' statement ':' statement

    '?'  shift, and go to state 142


State 115

   45 COND: LIT bin_boolop . LIT
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    CHARACTER  shift, and go to state 35

    LIT  go to state 143


State 116

   44 COND: un_boolop LIT . RELOP LIT
   47     | un_boolop LIT .  [TERMINATOR, CB]
   84 RELOP: . T_lt
   85      | . T_gt
   86      | . T_lteq
   87      | . T_gteq
   88      | . T_neq
   89      | . T_eqeq

    T_lt    shift, and go to state 78
    T_gt    shift, and go to state 79
    T_lteq  shift, and go to state 80
    T_gteq  shift, and go to state 81
    T_neq   shift, and go to state 82
    T_eqeq  shift, and go to state 83

    $default  reduce using rule 47 (COND)

    RELOP  go to state 130


State 117

   69 INPUT: CIN str_extr ID .  [TERMINATOR, CB, ':']
   70      | CIN str_extr ID . str_extr ID
   71      | CIN str_extr ID . str_extr ID str_extr ID

    str_extr  shift, and go to state 144

    $default  reduce using rule 69 (INPUT)


State 118

   18 C: C . statement TERMINATOR
   19  | C . LOOPS
   22  | C . OBR C CBR
   22  | C OBR C . CBR
   25 LOOPS: . WHILE OB COND CB LOOPBODY
   26      | . FOR OB ASSIGN_EXPR TERMINATOR COND TERMINATOR statement CB LOOPBODY
   27      | . COND
   28      | . CLASS ID LOOPBODY TERMINATOR
   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   40 COND: . LIT RELOP LIT
   41     | . LIT
   42     | . LIT RELOP LIT bin_boolop LIT RELOP LIT
   43     | . un_boolop OB LIT RELOP LIT CB
   44     | . un_boolop LIT RELOP LIT
   45     | . LIT bin_boolop LIT
   46     | . un_boolop OB LIT CB
   47     | . un_boolop LIT
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 19
    CLASS      shift, and go to state 20
    NUM        shift, and go to state 21
    RETURN     shift, and go to state 22
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    WHILE      shift, and go to state 27
    INT        shift, and go to state 28
    CHAR       shift, and go to state 29
    FLOAT      shift, and go to state 30
    COUT       shift, and go to state 31
    FOR        shift, and go to state 32
    OB         shift, and go to state 33
    OBR        shift, and go to state 69
    CBR        shift, and go to state 145
    CHARACTER  shift, and go to state 35
    CIN        shift, and go to state 36

    LOOPS         go to state 71
    statement     go to state 72
    COND          go to state 40
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 47
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 50


State 119

   18 C: C statement TERMINATOR .

    $default  reduce using rule 18 (C)


State 120

   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   64          | ARITH_EXPR T_pl ARITH_EXPR .  [COMMA, TERMINATOR, T_pl, T_min, CB, ':']
   65          | ARITH_EXPR . T_min ARITH_EXPR
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   67          | ARITH_EXPR . T_div ARITH_EXPR

    T_mul  shift, and go to state 76
    T_div  shift, and go to state 77

    $default  reduce using rule 64 (ARITH_NEW)

    Conflict between rule 64 and token T_pl resolved as reduce (%left T_pl).
    Conflict between rule 64 and token T_min resolved as reduce (%left T_min).
    Conflict between rule 64 and token T_mul resolved as shift (T_pl < T_mul).
    Conflict between rule 64 and token T_div resolved as shift (T_pl < T_div).


State 121

   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   65          | ARITH_EXPR . T_min ARITH_EXPR
   65          | ARITH_EXPR T_min ARITH_EXPR .  [COMMA, TERMINATOR, T_pl, T_min, CB, ':']
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   67          | ARITH_EXPR . T_div ARITH_EXPR

    T_mul  shift, and go to state 76
    T_div  shift, and go to state 77

    $default  reduce using rule 65 (ARITH_NEW)

    Conflict between rule 65 and token T_pl resolved as reduce (%left T_pl).
    Conflict between rule 65 and token T_min resolved as reduce (%left T_min).
    Conflict between rule 65 and token T_mul resolved as shift (T_min < T_mul).
    Conflict between rule 65 and token T_div resolved as shift (T_min < T_div).


State 122

   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   65          | ARITH_EXPR . T_min ARITH_EXPR
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   66          | ARITH_EXPR T_mul ARITH_EXPR .  [COMMA, TERMINATOR, T_pl, T_min, T_mul, T_div, CB, ':']
   67          | ARITH_EXPR . T_div ARITH_EXPR

    $default  reduce using rule 66 (ARITH_NEW)

    Conflict between rule 66 and token T_pl resolved as reduce (T_pl < T_mul).
    Conflict between rule 66 and token T_min resolved as reduce (T_min < T_mul).
    Conflict between rule 66 and token T_mul resolved as reduce (%left T_mul).
    Conflict between rule 66 and token T_div resolved as reduce (%left T_div).


State 123

   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   65          | ARITH_EXPR . T_min ARITH_EXPR
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   67          | ARITH_EXPR . T_div ARITH_EXPR
   67          | ARITH_EXPR T_div ARITH_EXPR .  [COMMA, TERMINATOR, T_pl, T_min, T_mul, T_div, CB, ':']

    $default  reduce using rule 67 (ARITH_NEW)

    Conflict between rule 67 and token T_pl resolved as reduce (T_pl < T_div).
    Conflict between rule 67 and token T_min resolved as reduce (T_min < T_div).
    Conflict between rule 67 and token T_mul resolved as reduce (%left T_mul).
    Conflict between rule 67 and token T_div resolved as reduce (%left T_div).


State 124

   40 COND: LIT RELOP LIT .  [ID, CLASS, NUM, TERMINATOR, RETURN, FLT, T_incr, T_decr, T_not, WHILE, INT, CHAR, FLOAT, COUT, FOR, OB, CB, OBR, CBR, CHARACTER, CIN]
   42     | LIT RELOP LIT . bin_boolop LIT RELOP LIT
   90 bin_boolop: . T_and
   91           | . T_or

    T_and  shift, and go to state 84
    T_or   shift, and go to state 85

    $default  reduce using rule 40 (COND)

    bin_boolop  go to state 146


State 125

   59 ARITH_EXPR: LIT bin_boolop ARITH_EXPR .  [COMMA, TERMINATOR, T_pl, T_min, T_mul, T_div, CB, ':']
   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   65          | ARITH_EXPR . T_min ARITH_EXPR
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   67          | ARITH_EXPR . T_div ARITH_EXPR

    T_pl   shift, and go to state 74
    T_min  shift, and go to state 75
    T_mul  shift, and go to state 76
    T_div  shift, and go to state 77

    T_pl      [reduce using rule 59 (ARITH_EXPR)]
    T_min     [reduce using rule 59 (ARITH_EXPR)]
    T_mul     [reduce using rule 59 (ARITH_EXPR)]
    T_div     [reduce using rule 59 (ARITH_EXPR)]
    $default  reduce using rule 59 (ARITH_EXPR)


State 126

   45 COND: LIT bin_boolop LIT .  [ID, CLASS, NUM, RETURN, FLT, T_incr, T_decr, T_not, WHILE, INT, CHAR, FLOAT, COUT, FOR, OB, OBR, CBR, CHARACTER, CIN]
   57 ARITH_EXPR: LIT .  [TERMINATOR, T_pl, T_min, T_mul, T_div]
   59           | LIT . bin_boolop ARITH_EXPR
   60           | LIT . un_arop
   63 ARITH_NEW: LIT .  [TERMINATOR, T_pl, T_min, T_mul, T_div]
   90 bin_boolop: . T_and
   91           | . T_or
   92 un_arop: . T_incr
   93        | . T_decr

    T_and   shift, and go to state 84
    T_or    shift, and go to state 85
    T_incr  shift, and go to state 24
    T_decr  shift, and go to state 25

    TERMINATOR  reduce using rule 57 (ARITH_EXPR)
    TERMINATOR  [reduce using rule 63 (ARITH_NEW)]
    T_pl        reduce using rule 57 (ARITH_EXPR)
    T_pl        [reduce using rule 63 (ARITH_NEW)]
    T_min       reduce using rule 57 (ARITH_EXPR)
    T_min       [reduce using rule 63 (ARITH_NEW)]
    T_mul       reduce using rule 57 (ARITH_EXPR)
    T_mul       [reduce using rule 63 (ARITH_NEW)]
    T_div       reduce using rule 57 (ARITH_EXPR)
    T_div       [reduce using rule 63 (ARITH_NEW)]
    T_incr      [reduce using rule 45 (COND)]
    T_decr      [reduce using rule 45 (COND)]
    $default    reduce using rule 45 (COND)

    bin_boolop  go to state 107
    un_arop     go to state 88


State 127

   51 ASSIGN_EXPR: TYPE ID COMMA . X
   53 X: . ID COMMA X
   54  | . ID
   55  | . ID T_eq ARITH_EXPR COMMA X
   56  | . ID T_eq ARITH_EXPR

    ID  shift, and go to state 147

    X  go to state 148


State 128

   49 ASSIGN_EXPR: TYPE ID T_eq . ARITH_EXPR
   52            | TYPE ID T_eq . ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 149
    ARITH_NEW   go to state 43
    LIT         go to state 58
    un_arop     go to state 49
    un_boolop   go to state 59


State 129

   43 COND: un_boolop OB LIT . RELOP LIT CB
   46     | un_boolop OB LIT . CB
   84 RELOP: . T_lt
   85      | . T_gt
   86      | . T_lteq
   87      | . T_gteq
   88      | . T_neq
   89      | . T_eqeq

    T_lt    shift, and go to state 78
    T_gt    shift, and go to state 79
    T_lteq  shift, and go to state 80
    T_gteq  shift, and go to state 81
    T_neq   shift, and go to state 82
    T_eqeq  shift, and go to state 83
    CB      shift, and go to state 150

    RELOP  go to state 151


State 130

   44 COND: un_boolop LIT RELOP . LIT
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    CHARACTER  shift, and go to state 35

    LIT  go to state 152


State 131

   13 CLASS_DEC: CLASS ID . LOOPBODY TERMINATOR
   29 LOOPBODY: . OBR C CBR
   30         | . TERMINATOR
   31         | . statement TERMINATOR
   32         | . OBR CBR
   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID          shift, and go to state 19
    NUM         shift, and go to state 21
    TERMINATOR  shift, and go to state 103
    RETURN      shift, and go to state 22
    FLT         shift, and go to state 23
    T_incr      shift, and go to state 24
    T_decr      shift, and go to state 25
    T_not       shift, and go to state 26
    INT         shift, and go to state 28
    CHAR        shift, and go to state 29
    FLOAT       shift, and go to state 30
    COUT        shift, and go to state 31
    OB          shift, and go to state 33
    OBR         shift, and go to state 104
    CHARACTER   shift, and go to state 35
    CIN         shift, and go to state 36

    LOOPBODY      go to state 153
    statement     go to state 106
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 58
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 59


State 132

    7 FunctionDeclaration: FunctionName OB . CB TERMINATOR FunctionDeclaration
    8                    | FunctionName OB . ParamsType CB TERMINATOR FunctionDeclaration
   11 ParamsType: . ParamsType COMMA TYPE
   12           | . TYPE
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT

    INT    shift, and go to state 28
    CHAR   shift, and go to state 29
    FLOAT  shift, and go to state 30
    CB     shift, and go to state 154

    ParamsType  go to state 155
    TYPE        go to state 156


State 133

    3 START: INCLUDE T_lt H T_gt CLASS_DEC FunctionDeclaration .

    $default  reduce using rule 3 (START)


State 134

   10 FunctionName: TYPE ID .

    $default  reduce using rule 10 (FunctionName)


State 135

   32 LOOPBODY: OBR CBR .

    $default  reduce using rule 32 (LOOPBODY)


State 136

   18 C: C . statement TERMINATOR
   19  | C . LOOPS
   22  | C . OBR C CBR
   25 LOOPS: . WHILE OB COND CB LOOPBODY
   26      | . FOR OB ASSIGN_EXPR TERMINATOR COND TERMINATOR statement CB LOOPBODY
   27      | . COND
   28      | . CLASS ID LOOPBODY TERMINATOR
   29 LOOPBODY: OBR C . CBR
   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   40 COND: . LIT RELOP LIT
   41     | . LIT
   42     | . LIT RELOP LIT bin_boolop LIT RELOP LIT
   43     | . un_boolop OB LIT RELOP LIT CB
   44     | . un_boolop LIT RELOP LIT
   45     | . LIT bin_boolop LIT
   46     | . un_boolop OB LIT CB
   47     | . un_boolop LIT
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 19
    CLASS      shift, and go to state 20
    NUM        shift, and go to state 21
    RETURN     shift, and go to state 22
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    WHILE      shift, and go to state 27
    INT        shift, and go to state 28
    CHAR       shift, and go to state 29
    FLOAT      shift, and go to state 30
    COUT       shift, and go to state 31
    FOR        shift, and go to state 32
    OB         shift, and go to state 33
    OBR        shift, and go to state 69
    CBR        shift, and go to state 157
    CHARACTER  shift, and go to state 35
    CIN        shift, and go to state 36

    LOOPS         go to state 71
    statement     go to state 72
    COND          go to state 40
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 47
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 50


State 137

   28 LOOPS: CLASS ID LOOPBODY TERMINATOR .

    $default  reduce using rule 28 (LOOPS)


State 138

   31 LOOPBODY: statement TERMINATOR .

    $default  reduce using rule 31 (LOOPBODY)


State 139

   25 LOOPS: WHILE OB COND CB . LOOPBODY
   29 LOOPBODY: . OBR C CBR
   30         | . TERMINATOR
   31         | . statement TERMINATOR
   32         | . OBR CBR
   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID          shift, and go to state 19
    NUM         shift, and go to state 21
    TERMINATOR  shift, and go to state 103
    RETURN      shift, and go to state 22
    FLT         shift, and go to state 23
    T_incr      shift, and go to state 24
    T_decr      shift, and go to state 25
    T_not       shift, and go to state 26
    INT         shift, and go to state 28
    CHAR        shift, and go to state 29
    FLOAT       shift, and go to state 30
    COUT        shift, and go to state 31
    OB          shift, and go to state 33
    OBR         shift, and go to state 104
    CHARACTER   shift, and go to state 35
    CIN         shift, and go to state 36

    LOOPBODY      go to state 158
    statement     go to state 106
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 58
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 59


State 140

   73 PRINT: COUT str_ins STRING str_ins . ENDL
   76      | COUT str_ins STRING str_ins . ID

    ID    shift, and go to state 159
    ENDL  shift, and go to state 160


State 141

   26 LOOPS: FOR OB ASSIGN_EXPR TERMINATOR . COND TERMINATOR statement CB LOOPBODY
   40 COND: . LIT RELOP LIT
   41     | . LIT
   42     | . LIT RELOP LIT bin_boolop LIT RELOP LIT
   43     | . un_boolop OB LIT RELOP LIT CB
   44     | . un_boolop LIT RELOP LIT
   45     | . LIT bin_boolop LIT
   46     | . un_boolop OB LIT CB
   47     | . un_boolop LIT
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    COND       go to state 161
    LIT        go to state 65
    un_boolop  go to state 66


State 142

   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   68             | OB COND CB '?' . statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 19
    NUM        shift, and go to state 21
    RETURN     shift, and go to state 22
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    INT        shift, and go to state 28
    CHAR       shift, and go to state 29
    FLOAT      shift, and go to state 30
    COUT       shift, and go to state 31
    OB         shift, and go to state 33
    CHARACTER  shift, and go to state 35
    CIN        shift, and go to state 36

    statement     go to state 162
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 58
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 59


State 143

   45 COND: LIT bin_boolop LIT .

    $default  reduce using rule 45 (COND)


State 144

   70 INPUT: CIN str_extr ID str_extr . ID
   71      | CIN str_extr ID str_extr . ID str_extr ID

    ID  shift, and go to state 163


State 145

   22 C: C OBR C CBR .

    $default  reduce using rule 22 (C)


State 146

   42 COND: LIT RELOP LIT bin_boolop . LIT RELOP LIT
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    CHARACTER  shift, and go to state 35

    LIT  go to state 164


State 147

   53 X: ID . COMMA X
   54  | ID .  [TERMINATOR, CB, ':']
   55  | ID . T_eq ARITH_EXPR COMMA X
   56  | ID . T_eq ARITH_EXPR

    COMMA  shift, and go to state 165
    T_eq   shift, and go to state 166

    $default  reduce using rule 54 (X)


State 148

   51 ASSIGN_EXPR: TYPE ID COMMA X .

    $default  reduce using rule 51 (ASSIGN_EXPR)


State 149

   49 ASSIGN_EXPR: TYPE ID T_eq ARITH_EXPR .  [TERMINATOR, CB, ':']
   52            | TYPE ID T_eq ARITH_EXPR . COMMA X
   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   65          | ARITH_EXPR . T_min ARITH_EXPR
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   67          | ARITH_EXPR . T_div ARITH_EXPR

    COMMA  shift, and go to state 167
    T_pl   shift, and go to state 74
    T_min  shift, and go to state 75
    T_mul  shift, and go to state 76
    T_div  shift, and go to state 77

    $default  reduce using rule 49 (ASSIGN_EXPR)


State 150

   46 COND: un_boolop OB LIT CB .

    $default  reduce using rule 46 (COND)


State 151

   43 COND: un_boolop OB LIT RELOP . LIT CB
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    CHARACTER  shift, and go to state 35

    LIT  go to state 168


State 152

   44 COND: un_boolop LIT RELOP LIT .

    $default  reduce using rule 44 (COND)


State 153

   13 CLASS_DEC: CLASS ID LOOPBODY . TERMINATOR

    TERMINATOR  shift, and go to state 169


State 154

    7 FunctionDeclaration: FunctionName OB CB . TERMINATOR FunctionDeclaration

    TERMINATOR  shift, and go to state 170


State 155

    8 FunctionDeclaration: FunctionName OB ParamsType . CB TERMINATOR FunctionDeclaration
   11 ParamsType: ParamsType . COMMA TYPE

    COMMA  shift, and go to state 171
    CB     shift, and go to state 172


State 156

   12 ParamsType: TYPE .

    $default  reduce using rule 12 (ParamsType)


State 157

   29 LOOPBODY: OBR C CBR .

    $default  reduce using rule 29 (LOOPBODY)


State 158

   25 LOOPS: WHILE OB COND CB LOOPBODY .

    $default  reduce using rule 25 (LOOPS)


State 159

   76 PRINT: COUT str_ins STRING str_ins ID .

    $default  reduce using rule 76 (PRINT)


State 160

   73 PRINT: COUT str_ins STRING str_ins ENDL .

    $default  reduce using rule 73 (PRINT)


State 161

   26 LOOPS: FOR OB ASSIGN_EXPR TERMINATOR COND . TERMINATOR statement CB LOOPBODY

    TERMINATOR  shift, and go to state 173


State 162

   68 TERNARY_EXPR: OB COND CB '?' statement . ':' statement

    ':'  shift, and go to state 174


State 163

   70 INPUT: CIN str_extr ID str_extr ID .  [TERMINATOR, CB, ':']
   71      | CIN str_extr ID str_extr ID . str_extr ID

    str_extr  shift, and go to state 175

    $default  reduce using rule 70 (INPUT)


State 164

   42 COND: LIT RELOP LIT bin_boolop LIT . RELOP LIT
   84 RELOP: . T_lt
   85      | . T_gt
   86      | . T_lteq
   87      | . T_gteq
   88      | . T_neq
   89      | . T_eqeq

    T_lt    shift, and go to state 78
    T_gt    shift, and go to state 79
    T_lteq  shift, and go to state 80
    T_gteq  shift, and go to state 81
    T_neq   shift, and go to state 82
    T_eqeq  shift, and go to state 83

    RELOP  go to state 176


State 165

   53 X: . ID COMMA X
   53  | ID COMMA . X
   54  | . ID
   55  | . ID T_eq ARITH_EXPR COMMA X
   56  | . ID T_eq ARITH_EXPR

    ID  shift, and go to state 147

    X  go to state 177


State 166

   55 X: ID T_eq . ARITH_EXPR COMMA X
   56  | ID T_eq . ARITH_EXPR
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    CHARACTER  shift, and go to state 35

    ARITH_EXPR  go to state 178
    ARITH_NEW   go to state 43
    LIT         go to state 58
    un_arop     go to state 49
    un_boolop   go to state 59


State 167

   52 ASSIGN_EXPR: TYPE ID T_eq ARITH_EXPR COMMA . X
   53 X: . ID COMMA X
   54  | . ID
   55  | . ID T_eq ARITH_EXPR COMMA X
   56  | . ID T_eq ARITH_EXPR

    ID  shift, and go to state 147

    X  go to state 179


State 168

   43 COND: un_boolop OB LIT RELOP LIT . CB

    CB  shift, and go to state 180


State 169

   13 CLASS_DEC: CLASS ID LOOPBODY TERMINATOR .

    $default  reduce using rule 13 (CLASS_DEC)


State 170

    7 FunctionDeclaration: . FunctionName OB CB TERMINATOR FunctionDeclaration
    7                    | FunctionName OB CB TERMINATOR . FunctionDeclaration
    8                    | . FunctionName OB ParamsType CB TERMINATOR FunctionDeclaration
    9                    | . MAIN
   10 FunctionName: . TYPE ID
   15 MAIN: . VOID MAINTOK BODY
   16     | . INT MAINTOK BODY
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT

    INT    shift, and go to state 95
    CHAR   shift, and go to state 29
    FLOAT  shift, and go to state 30
    VOID   shift, and go to state 3

    FunctionDeclaration  go to state 181
    FunctionName         go to state 97
    MAIN                 go to state 99
    TYPE                 go to state 100


State 171

   11 ParamsType: ParamsType COMMA . TYPE
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT

    INT    shift, and go to state 28
    CHAR   shift, and go to state 29
    FLOAT  shift, and go to state 30

    TYPE  go to state 182


State 172

    8 FunctionDeclaration: FunctionName OB ParamsType CB . TERMINATOR FunctionDeclaration

    TERMINATOR  shift, and go to state 183


State 173

   26 LOOPS: FOR OB ASSIGN_EXPR TERMINATOR COND TERMINATOR . statement CB LOOPBODY
   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 19
    NUM        shift, and go to state 21
    RETURN     shift, and go to state 22
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    INT        shift, and go to state 28
    CHAR       shift, and go to state 29
    FLOAT      shift, and go to state 30
    COUT       shift, and go to state 31
    OB         shift, and go to state 33
    CHARACTER  shift, and go to state 35
    CIN        shift, and go to state 36

    statement     go to state 184
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 58
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 59


State 174

   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   68             | OB COND CB '?' statement ':' . statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID         shift, and go to state 19
    NUM        shift, and go to state 21
    RETURN     shift, and go to state 22
    FLT        shift, and go to state 23
    T_incr     shift, and go to state 24
    T_decr     shift, and go to state 25
    T_not      shift, and go to state 26
    INT        shift, and go to state 28
    CHAR       shift, and go to state 29
    FLOAT      shift, and go to state 30
    COUT       shift, and go to state 31
    OB         shift, and go to state 33
    CHARACTER  shift, and go to state 35
    CIN        shift, and go to state 36

    statement     go to state 185
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 58
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 59


State 175

   71 INPUT: CIN str_extr ID str_extr ID str_extr . ID

    ID  shift, and go to state 186


State 176

   42 COND: LIT RELOP LIT bin_boolop LIT RELOP . LIT
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER

    ID         shift, and go to state 63
    NUM        shift, and go to state 21
    FLT        shift, and go to state 23
    CHARACTER  shift, and go to state 35

    LIT  go to state 187


State 177

   53 X: ID COMMA X .

    $default  reduce using rule 53 (X)


State 178

   55 X: ID T_eq ARITH_EXPR . COMMA X
   56  | ID T_eq ARITH_EXPR .  [TERMINATOR, CB, ':']
   64 ARITH_NEW: ARITH_EXPR . T_pl ARITH_EXPR
   65          | ARITH_EXPR . T_min ARITH_EXPR
   66          | ARITH_EXPR . T_mul ARITH_EXPR
   67          | ARITH_EXPR . T_div ARITH_EXPR

    COMMA  shift, and go to state 188
    T_pl   shift, and go to state 74
    T_min  shift, and go to state 75
    T_mul  shift, and go to state 76
    T_div  shift, and go to state 77

    $default  reduce using rule 56 (X)


State 179

   52 ASSIGN_EXPR: TYPE ID T_eq ARITH_EXPR COMMA X .

    $default  reduce using rule 52 (ASSIGN_EXPR)


State 180

   43 COND: un_boolop OB LIT RELOP LIT CB .

    $default  reduce using rule 43 (COND)


State 181

    7 FunctionDeclaration: FunctionName OB CB TERMINATOR FunctionDeclaration .

    $default  reduce using rule 7 (FunctionDeclaration)


State 182

   11 ParamsType: ParamsType COMMA TYPE .

    $default  reduce using rule 11 (ParamsType)


State 183

    7 FunctionDeclaration: . FunctionName OB CB TERMINATOR FunctionDeclaration
    8                    | . FunctionName OB ParamsType CB TERMINATOR FunctionDeclaration
    8                    | FunctionName OB ParamsType CB TERMINATOR . FunctionDeclaration
    9                    | . MAIN
   10 FunctionName: . TYPE ID
   15 MAIN: . VOID MAINTOK BODY
   16     | . INT MAINTOK BODY
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT

    INT    shift, and go to state 95
    CHAR   shift, and go to state 29
    FLOAT  shift, and go to state 30
    VOID   shift, and go to state 3

    FunctionDeclaration  go to state 189
    FunctionName         go to state 97
    MAIN                 go to state 99
    TYPE                 go to state 100


State 184

   26 LOOPS: FOR OB ASSIGN_EXPR TERMINATOR COND TERMINATOR statement . CB LOOPBODY

    CB  shift, and go to state 190


State 185

   68 TERNARY_EXPR: OB COND CB '?' statement ':' statement .

    $default  reduce using rule 68 (TERNARY_EXPR)


State 186

   71 INPUT: CIN str_extr ID str_extr ID str_extr ID .

    $default  reduce using rule 71 (INPUT)


State 187

   42 COND: LIT RELOP LIT bin_boolop LIT RELOP LIT .

    $default  reduce using rule 42 (COND)


State 188

   53 X: . ID COMMA X
   54  | . ID
   55  | . ID T_eq ARITH_EXPR COMMA X
   55  | ID T_eq ARITH_EXPR COMMA . X
   56  | . ID T_eq ARITH_EXPR

    ID  shift, and go to state 147

    X  go to state 191


State 189

    8 FunctionDeclaration: FunctionName OB ParamsType CB TERMINATOR FunctionDeclaration .

    $default  reduce using rule 8 (FunctionDeclaration)


State 190

   26 LOOPS: FOR OB ASSIGN_EXPR TERMINATOR COND TERMINATOR statement CB . LOOPBODY
   29 LOOPBODY: . OBR C CBR
   30         | . TERMINATOR
   31         | . statement TERMINATOR
   32         | . OBR CBR
   33 statement: . ASSIGN_EXPR
   34          | . ARITH_EXPR
   35          | . TERNARY_EXPR
   36          | . INPUT
   37          | . PRINT
   38          | . RETURN ASSIGN_EXPR
   39          | . RETURN ARITH_EXPR
   48 ASSIGN_EXPR: . ID T_eq ARITH_EXPR
   49            | . TYPE ID T_eq ARITH_EXPR
   50            | . TYPE ID
   51            | . TYPE ID COMMA X
   52            | . TYPE ID T_eq ARITH_EXPR COMMA X
   57 ARITH_EXPR: . LIT
   58           | . ARITH_NEW
   59           | . LIT bin_boolop ARITH_EXPR
   60           | . LIT un_arop
   61           | . un_arop ARITH_EXPR
   62           | . un_boolop ARITH_EXPR
   63 ARITH_NEW: . LIT
   64          | . ARITH_EXPR T_pl ARITH_EXPR
   65          | . ARITH_EXPR T_min ARITH_EXPR
   66          | . ARITH_EXPR T_mul ARITH_EXPR
   67          | . ARITH_EXPR T_div ARITH_EXPR
   68 TERNARY_EXPR: . OB COND CB '?' statement ':' statement
   69 INPUT: . CIN str_extr ID
   70      | . CIN str_extr ID str_extr ID
   71      | . CIN str_extr ID str_extr ID str_extr ID
   72 PRINT: . COUT str_ins STRING
   73      | . COUT str_ins STRING str_ins ENDL
   74      | . COUT str_ins ENDL
   75      | . COUT str_ins ID
   76      | . COUT str_ins STRING str_ins ID
   77 LIT: . ID
   78    | . NUM
   79    | . FLT
   80    | . CHARACTER
   81 TYPE: . INT
   82     | . CHAR
   83     | . FLOAT
   92 un_arop: . T_incr
   93        | . T_decr
   94 un_boolop: . T_not

    ID          shift, and go to state 19
    NUM         shift, and go to state 21
    TERMINATOR  shift, and go to state 103
    RETURN      shift, and go to state 22
    FLT         shift, and go to state 23
    T_incr      shift, and go to state 24
    T_decr      shift, and go to state 25
    T_not       shift, and go to state 26
    INT         shift, and go to state 28
    CHAR        shift, and go to state 29
    FLOAT       shift, and go to state 30
    COUT        shift, and go to state 31
    OB          shift, and go to state 33
    OBR         shift, and go to state 104
    CHARACTER   shift, and go to state 35
    CIN         shift, and go to state 36

    LOOPBODY      go to state 192
    statement     go to state 106
    ASSIGN_EXPR   go to state 41
    ARITH_EXPR    go to state 42
    ARITH_NEW     go to state 43
    TERNARY_EXPR  go to state 44
    INPUT         go to state 45
    PRINT         go to state 46
    LIT           go to state 58
    TYPE          go to state 48
    un_arop       go to state 49
    un_boolop     go to state 59


State 191

   55 X: ID T_eq ARITH_EXPR COMMA X .

    $default  reduce using rule 55 (X)


State 192

   26 LOOPS: FOR OB ASSIGN_EXPR TERMINATOR COND TERMINATOR statement CB LOOPBODY .

    $default  reduce using rule 26 (LOOPS)
